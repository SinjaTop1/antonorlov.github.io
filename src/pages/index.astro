---
import BaseHead from '../components/BaseHead.astro';
import Footer from '../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&family=Roboto:wght@400;700&display=swap" rel="stylesheet">
  </head>
  <body>
    <!-- Navigation -->
    <header class="nav">
      <nav>
        <ul>
          <li><a href="#">Resume</a></li>
          <div class="logo">
            <a href="#home"><strong>Anton Orlov</strong></a>
          </div>
          <li><a href="#">Projects</a></li>
        </ul>
        <div class="divider"></div>
      </nav>
    </header>

    <!-- Hero / Intro Section -->
    <section class="hero" id="home">
      <div class="hero-left">
        <h1 class="name">
          Hello,
        </h1>
        <h2 class="tagline">
          I am Entrepreneur and student,
        </h2>
        <p class="summary">
           I have experience working on multiple projects and am currently leading one.<br><br>
           I've traveled the world and had the privilege of building successful teams from the ground up.<br><br>
           My passion lies in creation and innovation, and my dream is to empower others to do the same.
        </p>
        <!-- Link circles with official LinkedIn and Instagram logos -->
        <div class="link-circles">
          <a href="https://www.linkedin.com/in/anton-orlov-b16126269/" class="circle-link" aria-label="LinkedIn" target="_blank">
            <svg role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
              <title>LinkedIn</title>
              <path fill="#ffffff" d="M19 0h-14c-2.76 0-5 2.24-5 5v14c0 2.76 2.24 5 5 5h14c2.76 0 5-2.24 5-5v-14c0-2.76-2.24-5-5-5zm-11.5 20h-3v-9h3v9zm-1.5-10.25c-.966 0-1.75-.784-1.75-1.75S5.534 6.5 6.5 6.5s1.75.784 1.75 1.75-.784 1.75-1.75 1.75zm13 10.25h-3v-4.5c0-1.08-.02-2.47-1.5-2.47-1.5 0-1.73 1.17-1.73 2.38v4.59h-3v-9h2.89v1.23h.04c.403-.76 1.387-1.56 2.855-1.56 3.053 0 3.62 2.008 3.62 4.62v4.71z"/>
            </svg>
          </a>
          <a href="https://www.instagram.com/orochiyo?igsh=MXd4MW9sMHN6czI2eQ==" class="circle-link" aria-label="Instagram" target="_blank">
            <svg role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
              <title>Instagram</title>
              <path fill="#ffffff" d="M12 2.2c3.1 0 3.5 0 4.7.1 1.2.1 1.9.3 2.3.5.6.2 1 .5 1.5 1 .5.5.8.9 1 1.5.2.4.4 1.1.5 2.3.1 1.2.1 1.6.1 4.7s0 3.5-.1 4.7c-.1 1.2-.3 1.9-.5 2.3-.2.6-.5 1-.9 1.5-.5.5-.9.8-1.5 1-.4.2-1.1.4-2.3.5-1.2.1-1.6.1-4.7.1s-3.5 0-4.7-.1c-1.2-.1-1.9-.3-2.3-.5-.6-.2-1-.5-1.5-1-.5-.5-.8-.9-1-1.5-.2-.4-.4-1.1-.5-2.3-.1-1.2-.1-1.6-.1-4.7s0-3.5.1-4.7c.1-1.2.3-1.9.5-2.3.2-.6.5-1 1-1.5.5-.5.9-.8 1.5-1 .4-.2 1.1-.4 2.3-.5 1.2-.1 1.6-.1 4.7-.1M12 0C8.741 0 8.332.015 7.052.072 5.771.129 4.807.308 4.042.633c-.78.337-1.44.787-2.102 1.45C1.278 2.747.828 3.407.49 4.187.166 4.952-.013 5.915-.07 7.196-.127 8.476-.142 8.885-.142 12c0 3.115.015 3.524.072 4.804.057 1.281.236 2.244.561 3.01.337.78.787 1.44 1.45 2.102.662.662 1.322 1.112 2.102 1.45.766.325 1.73.504 3.01.561 1.28.057 1.689.072 4.804.072s3.524-.015 4.804-.072c1.281-.057 2.244-.236 3.01-.561.78-.337 1.44-.787 2.102-1.45.662-.662 1.112-1.322 1.45-2.102.325-.766.504-1.73.561-3.01.057-1.28.072-1.689.072-4.804s-.015-3.524-.072-4.804c-.057-1.281-.236-2.244-.561-3.01-.337-.78-.787-1.44-1.45-2.102-.662-.662-1.322-1.112-2.102-1.45-.766-.325-1.73-.504-3.01-.561C15.524.015 15.115 0 12 0zm0 5.838a6.162 6.162 0 1 0 0 12.324 6.162 6.162 0 0 0 0-12.324zm0 10.162a3.999 3.999 0 1 1 0-8 3.999 3.999 0 0 1 0 8zm6.406-11.845a1.44 1.44 0 1 0 0-2.88 1.44 1.44 0 0 0 0 2.88z"/>
            </svg>
          </a>
        </div>
      </div>

      <div class="hero-right">
        <div class="hero-image">
          <img src="/PXL_20250206_162914543.MP.jpg" alt="Profile Photo" />
        </div>
      </div>

      <div class="scroll-indicator">
        <div class="mouse-shape">
          <div class="mouse-wheel"></div>
        </div>
        <span class="scroll-text">Scroll</span>
      </div>
    </section>

    <!-- Next Section (BSC section with reveal animation) -->
    <section class="next-section">
      <div class="section-heading reveal-element">
        <h1>BSC</h1>
      </div>
      
      <div class="BSC-left reveal-element">
        <p>
        <br>This is the next section content. This is the next section content. 
        This is the next section content. This is the next section content. 
        This is the next section content. This is the next section content. 
        This is the next section content. This is the next section content. 
        This is the next section content. This is the next section content.
        </p>
      </div>
      
      <div class="BSC-right reveal-element">
        <div class="carousel">
          <div class="carousel-container">
            <div class="carousel-slide active">
              <img src="public/PXL_20250206_162914543.MP.jpg" alt="Event Photo 1"/>
            </div>
            <div class="carousel-slide">
              <img src="public/PXL_20250206_162914543.MP.jpg" alt="Event Photo 2"/>
            </div>
            <div class="carousel-slide">
              <img src="public/PXL_20250206_162914543.MP.jpg" alt="Event Photo 3"/>
            </div>
            <div class="carousel-slide">
              <img src="public/PXL_20250206_162914543.MP.jpg" alt="Event Photo 4"/>
            </div>
          </div>
          
          <button class="carousel-button prev" aria-label="Previous slide">
            <svg viewBox="0 0 24 24" width="24" height="24">
              <path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 18l-6-6 6-6"></path>
            </svg>
          </button>
          
          <button class="carousel-button next" aria-label="Next slide">
            <svg viewBox="0 0 24 24" width="24" height="24">
              <path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 18l6-6-6-6"></path>
            </svg>
          </button>
          
          <div class="carousel-indicators">
            <button class="indicator active" data-slide="0" aria-label="Go to slide 1"></button>
            <button class="indicator" data-slide="1" aria-label="Go to slide 2"></button>
            <button class="indicator" data-slide="2" aria-label="Go to slide 3"></button>
            <button class="indicator" data-slide="3" aria-label="Go to slide 4"></button>
          </div>
        </div>
      </div>
    </section>
    
    <Footer />
    
    <!-- Carousel CSS -->
  

    <!-- Inline JavaScript for functionality -->
    <script is:inline>
      // Execute when content is loaded
      document.addEventListener("DOMContentLoaded", function() {
        // Smooth scroll function
        const scrollIndicator = document.querySelector(".scroll-indicator");
        const nextSection = document.querySelector(".next-section");
        
        if (scrollIndicator && nextSection) {
          scrollIndicator.addEventListener("click", function() {
            nextSection.scrollIntoView({ behavior: "smooth" });
          });
        }
    
        // Reveal elements on scroll
        const revealElements = document.querySelectorAll(".reveal-element");
        
        function checkScroll() {
          const windowHeight = window.innerHeight;
          revealElements.forEach(element => {
            const elementTop = element.getBoundingClientRect().top;
            if (elementTop < windowHeight - 100) {
              element.classList.add("revealed");
            }
          });
        }
    
        // Initial check
        checkScroll();
        
        // Check on scroll
        window.addEventListener("scroll", checkScroll);
    
        // Carousel functionality
        const carousel = document.querySelector(".carousel");
        
        if (carousel) {
          const container = carousel.querySelector(".carousel-container");
          const slides = carousel.querySelectorAll(".carousel-slide");
          const prevButton = carousel.querySelector(".prev");
          const nextButton = carousel.querySelector(".next");
          const indicators = carousel.querySelectorAll(".indicator");
          
          let currentIndex = 0;
          let touchStartX = 0;
          let touchEndX = 0;
          let autoplayInterval;
          
          // Function to update the carousel display
          function updateCarousel() {
            // Update transform to show the current slide
            container.style.transform = `translateX(-${currentIndex * 100}%)`;
            
            // Update active states
            slides.forEach((slide, index) => {
              slide.classList.toggle("active", index === currentIndex);
            });
            
            indicators.forEach((dot, index) => {
              dot.classList.toggle("active", index === currentIndex);
            });
          }
          
          // Function to go to the next slide
          function nextSlide() {
            currentIndex = (currentIndex + 1) % slides.length;
            updateCarousel();
          }
          
          // Function to go to the previous slide
          function prevSlide() {
            currentIndex = (currentIndex - 1 + slides.length) % slides.length;
            updateCarousel();
          }
          
          // Function to go to a specific slide
          function goToSlide(index) {
            currentIndex = index;
            updateCarousel();
            resetAutoplay();
          }
          
          // Start autoplay
          function startAutoplay() {
            autoplayInterval = setInterval(nextSlide, 5000); // Change slide every 5 seconds
          }
          
          // Reset autoplay (used after manual navigation)
          function resetAutoplay() {
            clearInterval(autoplayInterval);
            startAutoplay();
          }
          
          // Touch events for swipe functionality on mobile
          container.addEventListener("touchstart", (e) => {
            touchStartX = e.changedTouches[0].screenX;
          });
          
          container.addEventListener("touchend", (e) => {
            touchEndX = e.changedTouches[0].screenX;
            handleSwipe();
          });
          
          function handleSwipe() {
            // Minimum distance required for a swipe (pixels)
            const swipeThreshold = 50;
            
            if (touchEndX < touchStartX - swipeThreshold) {
              // Swipe left - show next slide
              nextSlide();
              resetAutoplay();
            } else if (touchEndX > touchStartX + swipeThreshold) {
              // Swipe right - show previous slide
              prevSlide();
              resetAutoplay();
            }
          }
          
          // Add event listeners for buttons and indicators
          if (nextButton) {
            nextButton.addEventListener("click", () => {
              nextSlide();
              resetAutoplay();
            });
          }
          
          if (prevButton) {
            prevButton.addEventListener("click", () => {
              prevSlide();
              resetAutoplay();
            });
          }
          
          indicators.forEach((dot, index) => {
            dot.addEventListener("click", () => {
              goToSlide(index);
            });
          });
          
          // Pause autoplay when hovering over the carousel
          carousel.addEventListener("mouseenter", () => {
            clearInterval(autoplayInterval);
          });
          
          carousel.addEventListener("mouseleave", () => {
            startAutoplay();
          });
          
          // Start the autoplay when the page loads
          startAutoplay();
        }
      });
    </script>
  </body>
</html>
<style>
/* GLOBAL RESET + BASIC STYLES */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html {
  scroll-behavior: smooth;
}

body {
  font-family: 'Roboto', Arial, sans-serif;
  background-color: #ffffff;
  color: #000000;
  overflow-x: hidden;
}

a {
  color: #000000;
  text-decoration: none;
}

a:hover {
  opacity: 0.8;
}

/* NAVIGATION */
.nav {
  font-family: 'Roboto', sans-serif;
  position: sticky;  /* Keeps the nav at the top on scroll */
  top: 0;
  z-index: 999;
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 1rem 2rem 0.2rem 2rem;
  background: #161616;
  width: 100%;
}

nav ul {
  display: flex;
  align-items: center;
  gap: 1.5rem;
  list-style: none;
  transition: color 0.3s ease;
  width: 100%;
  justify-content: center;
}

nav a {
  color: #fcfcfc;            
  transition: color 0.3s ease;
}

nav a:hover {
  color: #d38f41;
  opacity: 1;                
}

nav li {
  display: inline-block;
}

.logo {
  font-family: 'Roboto', sans-serif;
  font-weight: 700;
  font-size: 1.8rem;
  letter-spacing: 0.05rem;
  margin: 0 1.5rem;
}

/* The divider under the nav */
.divider {
  position: relative;
  height: 2px;
  background-color: #d38f41;
  width: 0%;                /* start at 0% for the animation */
  animation: slideIn 1s forwards;
}

@keyframes slideIn {
  0%   { width: 0%; }
  100% { width: 100%; }
}

/* HERO SECTION */
.hero {
  min-height: 100vh;        /* Enough to fill the screen */
  display: flex;
  flex-wrap: wrap;
  padding: 2rem 10vw;
  background-color: #161616;
  position: relative;
}

.hero-left {
  flex: 1 1 60%;
  display: flex;
  position: relative;
  flex-direction: column;
  justify-content: center;
  min-width: 300px;
}

.name {
  font-family: 'Montserrat', sans-serif;
  font-size: 2.5rem;
  margin-bottom: 1rem;
  letter-spacing: 0.1rem;
  font-weight: bold;
  /* Animated gradient text */
  background: linear-gradient(270deg, #d38f41, #ff6600, #64155f);
  background-size: 400% 400%;
  animation: gradientAnimation 5s ease infinite;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  color: transparent;
}

@keyframes gradientAnimation {
  0% { background-position: 0% 50%; }
  50% { background-position: 100% 50%; }
  100% { background-position: 0% 50%; }
}

.tagline {
  font-size: 1.7rem;
  margin-top: 1rem;
  font-weight: 700;
  line-height: 1.2;
  margin-bottom: 2rem;
  color: #ffffff;
}

.summary {
  position: relative;
  font-family: 'Montserrat', sans-serif;
  font-size: 1.5rem;
  line-height: 1.6;
  max-width: 25rem;
  color: rgba(255, 255, 255, 0.85);
}

/* Link circles with icons under summary */
.link-circles {
  margin-top: 1.5rem;
  display: flex;
  gap: 1rem;
}

.circle-link {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 50px;
  height: 50px;
  border-radius: 50%;
  background-color: #955f21;
  transition: all 0.3s ease;
}

.circle-link:hover {
  background-color: #d38f41;
  transform: translateY(-3px);
  box-shadow: 0 5px 15px rgba(211, 143, 65, 0.4);
}

.circle-link svg {
  width: 30px;
  height: 30px;
}

/* Right column: hero image */
.hero-right {
  flex: 1 1 40%;
  display: flex;
  align-items: center;
  justify-content: center;
  min-width: 300px;
}

.hero-image img {
  max-width: 100%;
  height: auto;
  border-radius: 0.5rem;
  box-shadow: 0 4px 20px rgba(211, 143, 65, 0.5);
  transition: transform 0.5s ease, box-shadow 0.5s ease;
}

.hero-image img:hover {
  transform: scale(1.02);
  box-shadow: 0 8px 25px rgba(211, 143, 65, 0.7);
}

/* Next Section with reveal animations */
.next-section {
  padding: 5rem 10vw;
  min-height: 50vh;
  display: grid;
  grid-template-areas:
    "heading heading"
    "left right";
  grid-template-columns: 1fr 1fr;
  gap: 2rem;
  background-color: #f8f8f8;
}

.section-heading {
  grid-area: heading;
  text-align: center;
  margin-bottom: 2rem;
}

.section-heading h1 {
  font-family: 'Montserrat', sans-serif;
  font-size: 2.5rem;
  color: #161616;
  position: relative;
  display: inline-block;
}

.section-heading h1::after {
  content: '';
  position: absolute;
  bottom: -10px;
  left: 50%;
  transform: translateX(-50%);
  width: 50%;
  height: 3px;
  background-color: #d38f41;
}

.BSC-left {
  grid-area: left;
  padding: 1rem;
  display: flex;
  flex-direction: column;
  justify-content: center;
}

.BSC-left p {
  font-family: 'Montserrat', sans-serif;
  font-size: 1.1rem;
  line-height: 1.6;
  color: #333;
}

.BSC-right {
  grid-area: right;
  display: flex;
  justify-content: center;
  align-items: center;
}

/* Carousel/Slider Styles */
.carousel {
  position: relative;
  width: 100%;
  max-width: 100%;
  height: 400px; /* Fixed height instead of aspect ratio */
  margin: 0 auto;
  overflow: hidden;
  border-radius: 0.5rem;
  box-shadow: 0 4px 20px rgba(211, 143, 65, 0.5);
}

.carousel-container {
  display: flex;
  height: 100%;
  transition: transform 0.6s cubic-bezier(0.645, 0.045, 0.355, 1);
}

.carousel-slide {
  min-width: 100%;
  height: 100%;
  position: relative;
  opacity: 0.7;
  transition: opacity 0.8s ease;
  display: flex;
  align-items: center;
  justify-content: center;
}

.carousel-slide.active {
  opacity: 1;
}

.carousel-slide img {
  width: 100%;
  height: 100%;
  object-fit: contain; /* Changed from cover to contain */
  display: block;
  max-height: 100%;
}

/* Left and Right Navigation Buttons */
.carousel-button {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  background-color: rgba(255, 255, 255, 0.25);
  border: none;
  border-radius: 50%;
  width: 40px;
  height: 40px;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  color: white;
  opacity: 0;
  transition: all 0.3s ease;
  z-index: 10;
  backdrop-filter: blur(3px);
}

.carousel:hover .carousel-button {
  opacity: 0.9;
}

.carousel-button:hover {
  background-color: rgba(211, 143, 65, 0.7);
  transform: translateY(-50%) scale(1.1);
}

.carousel-button:focus {
  outline: none;
}

.carousel-button.prev {
  left: 10px;
}

.carousel-button.next {
  right: 10px;
}

/* Indicator Dots */
.carousel-indicators {
  position: absolute;
  bottom: 15px;
  left: 50%;
  transform: translateX(-50%);
  display: flex;
  gap: 10px;
  z-index: 10;
}

.indicator {
  width: 10px;
  height: 10px;
  border-radius: 50%;
  background-color: rgba(255, 255, 255, 0.5);
  border: none;
  cursor: pointer;
  padding: 0;
  transition: all 0.3s ease;
}

.indicator.active {
  background-color: #d38f41;
  transform: scale(1.3);
}

.indicator:hover {
  background-color: rgba(211, 143, 65, 0.7);
}

/* Additional animation for slide transitions */
@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

.carousel-slide.active img {
  animation: fadeIn 0.6s ease forwards;
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .carousel {
    height: 300px;
  }
  
  .carousel-button {
    width: 32px;
    height: 32px;
  }
}

@media (max-width: 480px) {
  .carousel {
    height: 250px;
  }
}

.BSC-right img {
  max-width: 100%;
  height: auto;
  border-radius: 0.5rem;
  box-shadow: 0 4px 15px rgba(198, 125, 22, 0.4);
  transition: transform 0.5s ease, box-shadow 0.5s ease;
}

.BSC-right img:hover {
  transform: scale(1.03);
  box-shadow: 0 8px 25px rgba(198, 125, 22, 0.6);
}

/* Scroll indicator */
.scroll-indicator {
  position: fixed;
  bottom: 2rem;
  right: 2rem;
  display: flex;
  flex-direction: column;
  align-items: center;
  cursor: pointer;
  z-index: 99;
  transition: transform 0.3s ease, opacity 0.3s ease;
}

.scroll-indicator:hover {
  transform: translateY(-5px);
}

.scroll-text {
  margin-top: 0.5rem;
  font-size: 0.75rem;
  color: #b1acac;
  opacity: 0.8;
  letter-spacing: 0.05rem;
}

.mouse-shape {
  width: 24px;
  height: 40px;
  border: 2px solid #b1acac;
  border-radius: 16px;
  position: relative;
  background: transparent;
}

.mouse-wheel {
  width: 3px;
  height: 8px;
  background: #b1acac;
  border-radius: 2px;
  position: absolute;
  top: 6px;
  left: 50%;
  transform: translateX(-50%);
  animation: scrollWheel 1s ease-in-out infinite alternate;
}

@keyframes scrollWheel {
  0% {
    transform: translate(-50%, 0);
  }
  100% {
    transform: translate(-50%, 10px);
  }
}

/* Reveal animation for sections */
.reveal-element {
  opacity: 0;
  transform: translateY(50px);
  transition: opacity 0.8s ease, transform 0.8s ease;
}

.revealed {
  opacity: 1;
  transform: translateY(0);
}

/* Add sequential reveal for multiple elements */
.BSC-left.revealed {
  transition-delay: 0.2s;
}

.BSC-right.revealed {
  transition-delay: 0.4s;
}

/* Responsive design adjustments */
@media (max-width: 768px) {
  .next-section {
    grid-template-areas:
      "heading"
      "left"
      "right";
    grid-template-columns: 1fr;
  }
  
  .hero {
    flex-direction: column;
    gap: 2rem;
    padding: 3rem 5vw;
  }
  
  .hero-left, .hero-right {
    flex: 1 1 100%;
  }
  
  .summary {
    font-size: 1.2rem;
  }
  
  .name {
    font-size: 2rem;
  }
  
  .tagline {
    font-size: 1.4rem;
  }
}

<style>