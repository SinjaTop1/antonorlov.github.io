---
// Timeline data
const milestones = [
  {
    date: "December 2022",
    title: "Founded Olive Crown Estate",
    description: "Established and operated a boutique agency in Girne, Cyprus, specializing in residential property sales and rentals. Implemented CRM systems and automated workflows.",
    icon: "üè¢",
    image: "/images/olive-crown.jpg"
  },
  {
    date: "January 2023",
    title: "Launched BSC Initiative",
    description: "Started connecting students with top entrepreneurs through university events and accelerator programs. Created a unique equity-aligned mentorship model.",
    icon: "üéì",
    image: "/images/bsc.jpg"
  },
  {
    date: "June 2023",
    title: "International Expansion",
    description: "Expanded operations to multiple European universities, establishing partnerships with key educational institutions and industry leaders.",
    icon: "üåç",
    image: "/images/expansion.jpg"
  },
  {
    date: "September 2023",
    title: "First Accelerator Cohort",
    description: "Successfully launched the first cohort of student entrepreneurs, with 80% of participants securing funding or launching their ventures.",
    icon: "üöÄ",
    image: "/images/cohort.jpg"
  },
  {
    date: "Present",
    title: "Scaling Impact",
    description: "Leading the expansion of BSC's network, developing new programs, and mentoring the next generation of entrepreneurs.",
    icon: "‚≠ê",
    image: "/images/present.jpg"
  }
];
---

<section class="timeline-section" id="journey">
  <div class="section-container">
    <div class="section-header">
      <h2>My Journey</h2>
      <div class="header-line"></div>
    </div>

    <div class="timeline-container" role="region" aria-label="Professional Timeline">
      <div class="timeline-scroll" id="timeline-scroll">
        {milestones.map((milestone, index) => (
          <div class="timeline-item" data-index={index}>
            <div class="timeline-dot"></div>
            <div class="timeline-content">
              <div class="timeline-date">{milestone.date}</div>
              <div class="timeline-icon">{milestone.icon}</div>
              <h3 class="timeline-title">{milestone.title}</h3>
              <p class="timeline-description">{milestone.description}</p>
              {milestone.image && (
                <div class="timeline-image">
                  <img src={milestone.image} alt={milestone.title} />
                </div>
              )}
            </div>
          </div>
        ))}
      </div>
      
      <div class="timeline-progress">
        <div class="progress-bar"></div>
      </div>
    </div>

    <div class="timeline-controls">
      <button class="control-button prev" aria-label="Previous milestone">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24">
          <path fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" d="M15 18l-6-6 6-6"/>
        </svg>
      </button>
      <button class="control-button next" aria-label="Next milestone">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24">
          <path fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" d="M9 18l6-6-6-6"/>
        </svg>
      </button>
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const timelineScroll = document.getElementById('timeline-scroll') as HTMLElement;
    const timelineItems = document.querySelectorAll('.timeline-item');
    const progressBar = document.querySelector('.progress-bar') as HTMLElement;
    const prevButton = document.querySelector('.control-button.prev') as HTMLButtonElement;
    const nextButton = document.querySelector('.control-button.next') as HTMLButtonElement;
    
    let currentIndex = 0;
    const itemWidth = timelineItems[0] ? (timelineItems[0] as HTMLElement).offsetWidth : 0;
    
    // Update progress bar
    const updateProgress = () => {
      if (!timelineScroll) return;
      
      const scrollLeft = timelineScroll.scrollLeft;
      const maxScroll = timelineScroll.scrollWidth - timelineScroll.clientWidth;
      const progress = (scrollLeft / maxScroll) * 100;
      
      if (progressBar) {
        progressBar.style.width = `${progress}%`;
      }
    };
    
    // Scroll to item
    const scrollToItem = (index: number) => {
      if (!timelineScroll) return;
      
      const item = timelineItems[index] as HTMLElement;
      if (!item) return;
      
      const scrollLeft = item.offsetLeft - (timelineScroll.clientWidth - item.offsetWidth) / 2;
      timelineScroll.scrollTo({
        left: scrollLeft,
        behavior: 'smooth'
      });
      
      // Update active state
      timelineItems.forEach(item => item.classList.remove('active'));
      item.classList.add('active');
      
      currentIndex = index;
    };
    
    // Event listeners
    timelineScroll?.addEventListener('scroll', updateProgress);
    
    prevButton?.addEventListener('click', () => {
      if (currentIndex > 0) {
        scrollToItem(currentIndex - 1);
      }
    });
    
    nextButton?.addEventListener('click', () => {
      if (currentIndex < timelineItems.length - 1) {
        scrollToItem(currentIndex + 1);
      }
    });
    
    // Keyboard navigation
    document.addEventListener('keydown', (e) => {
      if (e.key === 'ArrowLeft' && currentIndex > 0) {
        scrollToItem(currentIndex - 1);
      } else if (e.key === 'ArrowRight' && currentIndex < timelineItems.length - 1) {
        scrollToItem(currentIndex + 1);
      }
    });
    
    // Initialize
    scrollToItem(0);
  });
</script>

<style>
  .timeline-section {
    padding: 6rem 2rem;
    background-color: #161616;
    position: relative;
    overflow: hidden;
  }
  
  .section-container {
    max-width: 1400px;
    margin: 0 auto;
  }
  
  .section-header {
    text-align: center;
    margin-bottom: 4rem;
  }
  
  .section-header h2 {
    font-size: 2.8rem;
    color: #ffffff;
    margin-bottom: 1rem;
  }
  
  .header-line {
    height: 3px;
    width: 80px;
    background: linear-gradient(90deg, #955f21, #d38f41);
    margin: 0 auto;
  }
  
  .timeline-container {
    position: relative;
    padding: 2rem 0;
  }
  
  .timeline-scroll {
    display: flex;
    overflow-x: auto;
    scroll-snap-type: x mandatory;
    scrollbar-width: none;
    -ms-overflow-style: none;
    gap: 2rem;
    padding: 1rem 0;
  }
  
  .timeline-scroll::-webkit-scrollbar {
    display: none;
  }
  
  .timeline-item {
    flex: 0 0 400px;
    scroll-snap-align: center;
    position: relative;
    padding: 2rem;
    background: rgba(255, 255, 255, 0.03);
    border-radius: 1rem;
    border: 1px solid rgba(255, 255, 255, 0.05);
    transition: all 0.3s ease;
  }
  
  .timeline-item:hover {
    transform: translateY(-5px);
    background: rgba(255, 255, 255, 0.05);
    border-color: rgba(211, 143, 65, 0.3);
  }
  
  .timeline-item.active {
    background: rgba(255, 255, 255, 0.07);
    border-color: #d38f41;
  }
  
  .timeline-dot {
    position: absolute;
    top: 50%;
    left: -1rem;
    width: 1rem;
    height: 1rem;
    background: #d38f41;
    border-radius: 50%;
    transform: translateY(-50%);
    transition: all 0.3s ease;
  }
  
  .timeline-item.active .timeline-dot {
    transform: translateY(-50%) scale(1.5);
    box-shadow: 0 0 0 4px rgba(211, 143, 65, 0.2);
  }
  
  .timeline-date {
    color: #d38f41;
    font-size: 0.9rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
  }
  
  .timeline-icon {
    font-size: 2rem;
    margin-bottom: 1rem;
  }
  
  .timeline-title {
    color: #ffffff;
    font-size: 1.5rem;
    margin-bottom: 1rem;
  }
  
  .timeline-description {
    color: rgba(255, 255, 255, 0.7);
    line-height: 1.6;
    margin-bottom: 1.5rem;
  }
  
  .timeline-image {
    width: 100%;
    height: 200px;
    border-radius: 0.5rem;
    overflow: hidden;
    margin-top: 1rem;
  }
  
  .timeline-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }
  
  .timeline-item:hover .timeline-image img {
    transform: scale(1.05);
  }
  
  .timeline-progress {
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 2px;
    background: rgba(255, 255, 255, 0.1);
  }
  
  .progress-bar {
    height: 100%;
    background: linear-gradient(90deg, #955f21, #d38f41);
    width: 0;
    transition: width 0.3s ease;
  }
  
  .timeline-controls {
    display: flex;
    justify-content: center;
    gap: 1rem;
    margin-top: 2rem;
  }
  
  .control-button {
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
    color: #ffffff;
    width: 3rem;
    height: 3rem;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
  }
  
  .control-button:hover {
    background: rgba(211, 143, 65, 0.2);
    border-color: #d38f41;
  }
  
  .control-button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
  
  @media (max-width: 768px) {
    .timeline-section {
      padding: 4rem 1rem;
    }
    
    .section-header h2 {
      font-size: 2.2rem;
    }
    
    .timeline-scroll {
      flex-direction: column;
      overflow-x: hidden;
      overflow-y: auto;
      scroll-snap-type: y mandatory;
      gap: 3rem;
    }
    
    .timeline-item {
      flex: 0 0 auto;
      width: 100%;
      max-width: 100%;
    }
    
    .timeline-dot {
      left: 50%;
      top: -1rem;
      transform: translateX(-50%);
    }
    
    .timeline-item.active .timeline-dot {
      transform: translateX(-50%) scale(1.5);
    }
    
    .timeline-controls {
      display: none;
    }
  }
  
  @media (max-width: 480px) {
    .timeline-section {
      padding: 3rem 0.75rem;
    }
    
    .section-header h2 {
      font-size: 1.8rem;
    }
    
    .timeline-item {
      padding: 1.5rem;
    }
    
    .timeline-title {
      font-size: 1.3rem;
    }
    
    .timeline-description {
      font-size: 0.95rem;
    }
    
    .timeline-image {
      height: 150px;
    }
  }
</style> 