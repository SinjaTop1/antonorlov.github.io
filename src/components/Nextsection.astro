---
// Import any components you need at the component level
---

<section class="next-section">
  <div class="section-heading reveal-element">
    <h1>BSC</h1>
  </div>
  
  <div class="BSC-left reveal-element">
    <div class="content-wrapper">
      <h2>Connecting Ambitious Minds</h2>
      
      <p class="mission-statement">
        We bridge the gap between entrepreneurial-minded students and industry leaders, creating opportunities that transform ideas into reality.
      </p>
      
      <div class="key-points">
        <div class="key-point">
          <span class="icon">ðŸ”—</span>
          <p>Connecting students with leading professionals through networking events and Masterclasses.</p>
        </div>
        
        <div class="key-point">
          <span class="icon">ðŸ’¡</span>
          <p>Designing practical workshops and seminars that provide real-world business knowledge and entrepreneurial skills.</p>
        </div>
        
        <div class="key-point">
          <span class="icon">ðŸš€</span>
          <p>Making business accessible by providing students with the tools, resources, and community needed to launch successful ventures.</p>
        </div>
      </div>
      
      <div class="cta-container">
        <a href="https://www.instagram.com/businesssuccesscommunity/" class="cta-button" target = "_blank">Visit Us</a>
      </div>
    </div>
  </div>
  
  <div class="BSC-right reveal-element">
    <div class="carousel">
      <div class="carousel-container">
        <div class="carousel-slide active">
          <img src="/PXL_20250206_162914543.MP.jpg" alt="Event Photo 1" loading="lazy"/>
          <div class="caption">Networking Event, February 2025</div>
        </div>
        <div class="carousel-slide">
          <img src="/PXL_20250206_162914543.MP.jpg" alt="Event Photo 2" loading="lazy"/>
          <div class="caption">Startup Workshop, January 2025</div>
        </div>
        <div class="carousel-slide">
          <img src="/PXL_20250206_162914543.MP.jpg" alt="Event Photo 3" loading="lazy"/>
          <div class="caption">Pitch Competition, December 2024</div>
        </div>
        <div class="carousel-slide">
          <img src="/PXL_20250206_162914543.MP.jpg" alt="Event Photo 4" loading="lazy"/>
          <div class="caption">Industry Panel Discussion, November 2024</div>
        </div>
      </div>
      
      <button class="carousel-button prev" aria-label="Previous slide">
        <svg viewBox="0 0 24 24" width="24" height="24">
          <path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 18l-6-6 6-6"></path>
        </svg>
      </button>
      
      <button class="carousel-button next" aria-label="Next slide">
        <svg viewBox="0 0 24 24" width="24" height="24">
          <path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 18l6-6-6-6"></path>
        </svg>
      </button>
      
      <div class="carousel-indicators">
        <button class="indicator active" data-slide="0" aria-label="Go to slide 1"></button>
        <button class="indicator" data-slide="1" aria-label="Go to slide 2"></button>
        <button class="indicator" data-slide="2" aria-label="Go to slide 3"></button>
        <button class="indicator" data-slide="3" aria-label="Go to slide 4"></button>
      </div>
    </div>
  </div>
</section>


<script>
  // This ensures the DOM is fully loaded before our script runs
  document.addEventListener("DOMContentLoaded", () => {
    // Reveal elements on scroll
    const revealElements: NodeListOf<HTMLElement> = document.querySelectorAll(".reveal-element");
    
    function checkScroll(): void {
      const windowHeight: number = window.innerHeight;
      revealElements.forEach((element: HTMLElement) => {
        const elementTop: number = element.getBoundingClientRect().top;
        if (elementTop < windowHeight - 100) {
          element.classList.add("revealed");
        }
      });
    }

    // Initial check
    checkScroll();
    
    // Check on scroll
    window.addEventListener("scroll", checkScroll);

    // Carousel initialization
    const carousel: HTMLElement | null = document.querySelector(".carousel");
    
    if (carousel) {
      const container: HTMLElement | null = carousel.querySelector(".carousel-container");
      
      // Verify container exists before proceeding
      if (!container) return;
      
      const slides: NodeListOf<HTMLElement> = carousel.querySelectorAll(".carousel-slide");
      const prevButton: HTMLElement | null = carousel.querySelector(".prev");
      const nextButton: HTMLElement | null = carousel.querySelector(".next");
      const indicators: NodeListOf<HTMLElement> = carousel.querySelectorAll(".indicator");
      
      let currentIndex: number = 0;
      let touchStartX: number = 0;
      let touchEndX: number = 0;
      let autoplayInterval: number | undefined;
      
      // Function to update the carousel display
      function updateCarousel(): void {
        // Update transform to show the current slide (container is guaranteed to exist here)
        if (container) {
          container.style.transform = `translateX(-${currentIndex * 100}%)`;
        }
        
        // Update active states
        slides.forEach((slide: HTMLElement, index: number) => {
          slide.classList.toggle("active", index === currentIndex);
        });
        
        indicators.forEach((dot: HTMLElement, index: number) => {
          dot.classList.toggle("active", index === currentIndex);
        });
      }
      
      // Function to go to the next slide
      function nextSlide(): void {
        currentIndex = (currentIndex + 1) % slides.length;
        updateCarousel();
      }
      
      // Function to go to the previous slide
      function prevSlide(): void {
        currentIndex = (currentIndex - 1 + slides.length) % slides.length;
        updateCarousel();
      }
      
      // Function to go to a specific slide
      function goToSlide(index: number): void {
        currentIndex = index;
        updateCarousel();
        resetAutoplay();
      }
      
      // Start autoplay
      function startAutoplay(): void {
        autoplayInterval = window.setInterval(nextSlide, 5000); // Change slide every 5 seconds
      }
      
      // Reset autoplay (used after manual navigation)
      function resetAutoplay(): void {
        if (autoplayInterval) {
          window.clearInterval(autoplayInterval);
        }
        startAutoplay();
      }
      
      // Touch events for swipe functionality on mobile
      container.addEventListener("touchstart", (e: TouchEvent) => {
        touchStartX = e.changedTouches[0].screenX;
      });
      
      container.addEventListener("touchend", (e: TouchEvent) => {
        touchEndX = e.changedTouches[0].screenX;
        handleSwipe();
      });
      
      function handleSwipe(): void {
        // Minimum distance required for a swipe (pixels)
        const swipeThreshold: number = 50;
        
        if (touchEndX < touchStartX - swipeThreshold) {
          // Swipe left - show next slide
          nextSlide();
          resetAutoplay();
        } else if (touchEndX > touchStartX + swipeThreshold) {
          // Swipe right - show previous slide
          prevSlide();
          resetAutoplay();
        }
      }
      
      // Add event listeners for buttons and indicators
      if (nextButton) {
        nextButton.addEventListener("click", () => {
          nextSlide();
          resetAutoplay();
        });
      }
      
      if (prevButton) {
        prevButton.addEventListener("click", () => {
          prevSlide();
          resetAutoplay();
        });
      }
      
      indicators.forEach((dot: HTMLElement, index: number) => {
        dot.addEventListener("click", () => {
          goToSlide(index);
        });
      });
      
      // Pause autoplay when hovering over the carousel
      carousel.addEventListener("mouseenter", () => {
        if (autoplayInterval) {
          window.clearInterval(autoplayInterval);
        }
      });
      
      carousel.addEventListener("mouseleave", () => {
        startAutoplay();
      });
      
      // Start the autoplay when the page loads
      startAutoplay();
    }
  });
</script>

<style>
/* Next Section with reveal animations */
.next-section {
  position: relative;
  display: flex;
  flex-wrap: wrap;
  padding: 4rem 2rem;
  min-height: 100vh;
  background-color: #ffffffc4;
}

.section-heading {
  width: 100%;
  margin-bottom: 2rem;
  text-align: center;
}

.section-heading h1 {
  font-size: 2.5rem;
  font-weight: 700;
  color: #333;
  position: relative;
  display: inline-block;
}

.section-heading h1::after {
  content: "";
  position: absolute;
  bottom: -10px;
  left: 50%;
  transform: translateX(-50%);
  width: 60px;
  height: 3px;
  background-color: #d38f41;
}

.BSC-left {
  flex: 1;
  padding: 2rem;
  min-width: 300px;
  display: flex;
  flex-direction: column;
  justify-content: center;
}

.content-wrapper {
  max-width: 600px;
  margin: 0 auto;
}

.BSC-left h2 {
  font-size: 1.8rem;
  text-align: center;
  margin-bottom: 1.5rem;
  background: linear-gradient(270deg, #d38f41, #ff6600, #64155f);
  background-size: 400% 400%;
  animation: gradientAnimation 5s ease infinite;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  color: transparent;
}

/* Adding the missing keyframe animation */
@keyframes gradientAnimation {
  0% { background-position: 0% 50%; }
  50% { background-position: 100% 50%; }
  100% { background-position: 0% 50%; }
}

.mission-statement {
  text-align: center;
  font-size: 1.2rem;
  line-height: 1.6;
  color: #333;
  margin-bottom: 2rem;
  font-weight: 500;
}

.key-points {
  margin-bottom: 2rem;
}

.key-point {
  display: flex;
  align-items: flex-start;
  margin-bottom: 1.2rem;
}

.icon {
  font-size: 1.5rem;
  margin-right: 0.8rem;
  color: #4a76b8;
}

.key-point p {
  margin: 0;
  line-height: 1.5;
  color: #555;
}

.cta-container {
  margin-top: 1rem;
}

.cta-button {
  display: inline-block;
  justify-content: center;
  padding: 0.8rem 1.5rem;
  text-decoration: none;
  border-radius: 4px;
  font-weight: 600;
  transition: all 0.3s ease;
  background: linear-gradient(270deg, #d38f41, #ff6600, #64155f);
  background-size: 400% 400%;
  animation: gradientAnimation 5s ease infinite;
  color: white;
  text-shadow: 0px 1px 2px rgba(0, 0, 0, 0.3);
  /* Added explicit size */
  min-width: 450px;
  text-align: center;
  /* You can adjust these values as needed */
}

.cta-button:hover {
  /* Changed to transform instead of background-color to preserve gradient */
  transform: translateY(-2px);
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
}

.BSC-right {
  flex: 1;
  padding: 2rem;
  min-width: 300px;
}

.carousel {
  position: relative;
  width: 100%;
  overflow: hidden;
  border-radius: 8px;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.15);
}

.carousel-container {
  display: flex;
  transition: transform 0.5s ease;
}

.carousel-slide {
  min-width: 100%;
  opacity: 0.7;
  transition: opacity 0.3s ease;
  position: relative;
}

.carousel-slide.active {
  opacity: 1;
}

.carousel-slide img {
  width: 100%;
  height: auto;
  display: block;
}

.caption {
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  padding: 0.8rem;
  background-color: rgba(0, 0, 0, 0.6);
  color: white;
  text-align: center;
  font-size: 0.9rem;
}

.carousel-button {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  background: rgba(255, 255, 255, 0.7);
  border: none;
  width: 40px;
  height: 40px;
  border-radius: 50%;
  cursor: pointer;
  z-index: 10;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: background 0.3s ease;
}

.carousel-button:hover {
  background: rgba(255, 255, 255, 0.9);
}

.carousel-button.prev {
  left: 10px;
}

.carousel-button.next {
  right: 10px;
}

.carousel-indicators {
  position: absolute;
  bottom: 15px;
  left: 50%;
  transform: translateX(-50%);
  display: flex;
  gap: 8px;
}

.indicator {
  width: 12px;
  height: 12px;
  border-radius: 50%;
  background: rgba(255, 255, 255, 0.5);
  border: none;
  cursor: pointer;
  transition: background 0.3s ease;
}

.indicator.active {
  background: white;
}

/* Animation for reveal elements */
.reveal-element {
  opacity: 0;
  transform: translateY(30px);
  transition: opacity 0.8s ease, transform 0.8s ease;
}

.reveal-element.revealed {
  opacity: 1;
  transform: translateY(0);
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .next-section {
    flex-direction: column;
    padding: 3rem 1.5rem;
  }
  
  .BSC-left, .BSC-right {
    width: 100%;
    padding: 1rem;
  }

  .section-heading h1 {
    font-size: 2rem;
  }

  .BSC-left h2 {
    font-size: 1.5rem;
  }

  .mission-statement {
    font-size: 1.1rem;
  }
}

.indicator {
  width: 10px;
  height: 10px;
  border-radius: 50%;
  background-color: rgba(255, 255, 255, 0.5);
  border: none;
  cursor: pointer;
  padding: 0;
  transition: all 0.3s ease;
}

.indicator.active {
  background-color: #d38f41;
  transform: scale(1.3);
}

.indicator:hover {
  background-color: rgba(211, 143, 65, 0.7);
}

/* Additional animation for slide transitions */
@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

.carousel-slide.active img {
  animation: fadeIn 0.6s ease forwards;
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .carousel {
    height: auto; /* Changed from fixed height to auto */
    max-height: 300px; /* Added max-height instead */
  }
  
  .carousel-button {
    width: 32px;
    height: 32px;
  }
}

@media (max-width: 480px) {
  .carousel {
    height: auto; /* Changed from fixed height to auto */
    max-height: 250px; /* Added max-height instead */
  }
}

.BSC-right img {
  max-width: 100%;
  height: auto;
  border-radius: 0.5rem;
  box-shadow: 0 4px 15px rgba(198, 125, 22, 0.4);
  transition: transform 0.5s ease, box-shadow 0.5s ease;
}

.BSC-right img:hover {
  transform: scale(1.03);
  box-shadow: 0 8px 25px rgba(198, 125, 22, 0.6);
}
</style>